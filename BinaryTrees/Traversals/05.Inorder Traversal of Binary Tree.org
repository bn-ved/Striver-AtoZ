#+title: 05. Inorder Traversal Of Binary Tree
#+author: Bedaprakash Nayak
#+date: <2024-01-01 Mon>
*Problem Statement:* Given a Binary Tree. Find and print the inorder traversal of Binary Tree.

** Iterative
*** Intuition
In inorder traversal, the tree is traversed in this way: left, root, right. We first visit the left child, after returning from it we print the current node value, then we visit the right child. The fundamental problem we face in this scenario is that there is no way that we can move from a child to a parent. To solve this problem, we use an explicit stack data structure. While traversing we can insert node values to the stack in such a way that we always get the next node value at the top of the stack.

*** Approach

The algorithm approach can be stated as:

- We first take an explicit stack data structure and set an infinite loop.
- In every iteration we check whether our current node is pointing to NULL or not.
- If it is not pointing to null, we simply push the current value to the stack and move the current node to its left child.
- If it is pointing to NULL, we first check whether the stack is empty or not. If the stack is empty, it means that we have traversed the tree and we break out of the loop.
- If the stack is not empty, we pop the top value of the stack, print it and move the current node to its right child.

*** Solution

#+begin_src C++
#include <stack>
#include <vector>

using namespace std;

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(NULL), right(NULL) {}
  TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  TreeNode(int val, TreeNode *left, TreeNode *right)
      : val(val), left(left), right(right) {}
};

class Solution {
public: // Iterative
  vector<int> inorderTraversal_iterative(TreeNode *root) {
    vector<int> inOrder;
    stack<TreeNode *> stk;

    while (true) {
      if (root != NULL) {
        stk.push(root);
        root = root->left;
      } else {
        if (stk.empty()) {
          break;
        }
        root = stk.top();
        inOrder.push_back(root->val);
        stk.pop();
        root = root->right;
      }
    }
    return inOrder;
  }
};
#+end_src

** Recursive
*** Intuition
In inorder traversal, the tree is traversed in this way: left, root, right.

*** Approach
The algorithm approach can be stated as:

- We first recursively visit the left child and go on till we find a leaf node.
- Then we print that node value.
- Then we recursively visit the right child.
- If we encounter a node pointing to NULL, we simply return to its parent.

*** Solution

#+begin_src C++
#include <stack>
#include <vector>

using namespace std;

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(NULL), right(NULL) {}
  TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  TreeNode(int val, TreeNode *left, TreeNode *right)
      : val(val), left(left), right(right) {}
};

public: // Recursive
  void inorderTraversal(TreeNode *root, vector<int> &inOrder) {
    if (!root) {
      return;
    }
    inorderTraversal(root->left, inOrder);
    inOrder.push_back(root->val);
    inorderTraversal(root->right, inOrder);
  }

public:
  vector<int> inorderTraversal(TreeNode *root) {
    vector<int> inOrder;
    inorderTraversal(root, inOrder);
    return inOrder;
  }
};
#+end_src
